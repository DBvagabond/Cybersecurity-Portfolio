#include <ESP8266WiFi.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

const char *ssid = "wifi_ssid";
const char *password = "wifi_password";
const char *apiKey = "your_key";  // Replace with your OpenWeatherMap API key
const char *city = "your_city";
const char *country = "your_country";

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

unsigned long previousMillis = 0;
const long interval = 30000; // Interval to switch between displays (30 seconds)

bool displayForecast = false;

void setup() {
  Serial.begin(115200);

  // Initialize display
  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.display();
  delay(2000);
  display.clearDisplay();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");

  // Fetch weather data
  fetchWeatherData();
  fetchForecastData();
}

void fetchWeatherData() {
  HTTPClient http;
  WiFiClient client;

  // Declare DynamicJsonDocument
  DynamicJsonDocument doc(16384);

  // Specify the complete URL with API key
  String url = "http://api.openweathermap.org/data/2.5/forecast?q=" + String(city) + "," + String(country) + ",PL&APPID=" + String(apiKey) + "&units=metric";

  // Make the GET request
  if (http.begin(client, url)) {
    int httpCode = http.GET();
    if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK) {
        // Use the stream interface to parse JSON directly from the response
        DeserializationError jsonError = deserializeJson(doc, http.getStream());

        if (jsonError) {
          Serial.print(F("JSON parsing failed: "));
          Serial.println(jsonError.c_str());
        } else {
          // Display current weather on OLED
          display.clearDisplay();
          display.setTextSize(1);
          display.setTextColor(SSD1306_WHITE);
          display.setCursor(0, 0);
          display.print(String(city) + " tomorrow:");
          display.setCursor(0, 10);
          display.print("Temp: ");
          display.print(doc["list"][8]["main"]["temp"].as<float>());
          display.print((char)247);
          display.setCursor(0, 20);
          display.print("Feel: ");
          display.print(doc["list"][8]["main"]["feels_like"].as<float>());
          display.println((char)247);
          display.setCursor(0, 30);
          display.println(doc["list"][8]["weather"][0]["description"].as<String>());
          display.setCursor(0, 40);
          display.print("Wind: ");
          display.print(doc["list"][8]["wind"]["speed"].as<float>());
          display.print(" km/h");
          display.setCursor(0, 57);
          display.println(doc["list"][8]["dt_txt"].as<String>());
          display.display();
        }
      } else {
        Serial.print("HTTP request failed with code ");
        Serial.println(httpCode);
      }
    } else {
      Serial.println("HTTP request failed");
    }

    http.end();
  } else {
    Serial.println("Unable to begin HTTP client");
  }
}

void fetchForecastData() {
  HTTPClient http;
  WiFiClient client;

  // Declare DynamicJsonDocument
  DynamicJsonDocument doc(1024);

  // Specify the complete URL with API key
  String url = "http://api.openweathermap.org/data/2.5/weather?q=" + String(city) + "," + String(country) + ",PL&APPID=" + String(apiKey) + "&units=metric";

  // Make the GET request
  if (http.begin(client, url)) {
    int httpCode = http.GET();
    if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK) {
        // Use the stream interface to parse JSON directly from the response
        DeserializationError jsonError = deserializeJson(doc, http.getStream());

        if (jsonError) {
          Serial.print(F("JSON parsing failed: "));
          Serial.println(jsonError.c_str());
        } else {
          // Display current weather on OLED
          display.clearDisplay();
          display.setTextSize(1);
          display.setTextColor(SSD1306_WHITE);
          display.setCursor(0, 0);
          display.print(String(city) + " now:");
          display.setCursor(0, 10);
          display.print("Temp: ");
          display.print(doc["main"]["temp"].as<float>());
          display.print((char)247);
          display.setCursor(0, 20);
          display.print("Feel: ");
          display.print(doc["main"]["feels_like"].as<float>());
          display.println((char)247);
          display.setCursor(0, 30);
          display.println(doc["weather"][0]["description"].as<String>());
          display.setCursor(0, 40);
          display.print("Wind: ");
          display.print(doc["wind"]["speed"].as<float>());
          display.print(" km/h");
          display.display();
        }
      } else {
        Serial.print("HTTP request failed with code ");
        Serial.println(httpCode);
      }
    } else {
      Serial.println("HTTP request failed");
    }

    http.end();
  } else {
    Serial.println("Unable to begin HTTP client");
  }
}

void loop() {
  unsigned long currentMillis = millis();

  // Switch between displays at the specified interval
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    // Toggle the display type
    displayForecast = !displayForecast;

    // Set the display to the next buffer
    display.clearDisplay();
    display.display();

    // Fetch the data for the next display
    if (displayForecast) {
      fetchForecastData();
    } else {
      fetchWeatherData();
    }

    // Wait for a short time to allow the display to be read
    delay(5000);

    // Swap the display buffers
    display.display();
  }

  // Continue other tasks or handle events in the loop
}
