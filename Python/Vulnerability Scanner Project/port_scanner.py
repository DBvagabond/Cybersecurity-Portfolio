import socket
from concurrent.futures import ThreadPoolExecutor, as_completed
import csv
from datetime import datetime
import os

def scan_port(ip, port):
    """Scan a single port on a given IP address."""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(0.5)  # Timeout of 0.5 second
        result = sock.connect_ex((ip, port))
        return port if result == 0 else None
    except Exception as e:
        print(f"Error scanning port {port}: {e}")
        return None
    finally:
        sock.close()

def scan_ports(ip, port_range):
    """Scan a range of ports on a given IP address using parallel threads."""
    open_ports = []
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = {executor.submit(scan_port, ip, port): port for port in port_range}
        for future in as_completed(futures):
            port = future.result()
            if port is not None:
                open_ports.append(port)
    return open_ports

def save_ports_to_csv(ip, open_ports, folder="port_scan_results"):
    """Save the list of open ports to a CSV file with a timestamped filename."""
    timestamp = datetime.now().strftime("%H%M%d%m%Y")
    filename = f"{timestamp}_portscan.csv"
    
    # Ensure the folder exists
    if not os.path.exists(folder):
        os.makedirs(folder)
    
    filepath = os.path.join(folder, filename)
    
    with open(filepath, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["IP Address", "Open Ports"])
        writer.writerow([ip, ", ".join(map(str, open_ports))])
    
    print(f"Port scan results saved to {filepath}")

if __name__ == "__main__":
    ip = input("Enter the IP address to scan: ")
    port_range = range(1, 1025)  # Scanning ports 1 through 1024
    open_ports = scan_ports(ip, port_range)
    
    if open_ports:
        print(f"Open ports on {ip}:")
        for port in open_ports:
            print(f"Port {port} is open")
        
        # Save results to CSV
        save_ports_to_csv(ip, open_ports)
    else:
        print(f"No open ports found on {ip}.")
